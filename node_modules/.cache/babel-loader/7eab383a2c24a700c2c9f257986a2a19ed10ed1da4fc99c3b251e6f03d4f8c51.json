{"ast":null,"code":"/**\n * Creates a URL for a page with optional parameters.\n * @param {string} page - The page name.\n * @param {Object} params - Optional parameters to include in the URL.\n * @returns {string} The formatted URL.\n */\nexport function createPageUrl(page, params = {}) {\n  let url = `/${page}`;\n  const queryParams = new URLSearchParams();\n  for (const [key, value] of Object.entries(params)) {\n    if (value !== undefined && value !== null) {\n      queryParams.append(key, value);\n    }\n  }\n  const queryString = queryParams.toString();\n  if (queryString) {\n    url += `?${queryString}`;\n  }\n  return url;\n}\n\n/**\n * Formats a date string into a human-readable format.\n * @param {string} dateString - The date string to format.\n * @param {string} format - The format to use: 'short', 'medium', or 'long'.\n * @returns {string} The formatted date string.\n */\nexport function formatDate(dateString, format = 'medium') {\n  const date = new Date(dateString);\n  const options = {\n    short: {\n      month: 'numeric',\n      day: 'numeric'\n    },\n    medium: {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    },\n    long: {\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric',\n      year: 'numeric'\n    }\n  };\n  return date.toLocaleDateString('en-US', options[format]);\n}","map":{"version":3,"names":["createPageUrl","page","params","url","queryParams","URLSearchParams","key","value","Object","entries","undefined","append","queryString","toString","formatDate","dateString","format","date","Date","options","short","month","day","medium","year","long","weekday","toLocaleDateString"],"sources":["C:/Users/hp/OneDrive/vs code projects/tryquad hackathon/src/utils.js"],"sourcesContent":["/**\n * Creates a URL for a page with optional parameters.\n * @param {string} page - The page name.\n * @param {Object} params - Optional parameters to include in the URL.\n * @returns {string} The formatted URL.\n */\nexport function createPageUrl(page, params = {}) {\n  let url = `/${page}`;\n  \n  const queryParams = new URLSearchParams();\n  for (const [key, value] of Object.entries(params)) {\n    if (value !== undefined && value !== null) {\n      queryParams.append(key, value);\n    }\n  }\n  \n  const queryString = queryParams.toString();\n  if (queryString) {\n    url += `?${queryString}`;\n  }\n  \n  return url;\n}\n\n/**\n * Formats a date string into a human-readable format.\n * @param {string} dateString - The date string to format.\n * @param {string} format - The format to use: 'short', 'medium', or 'long'.\n * @returns {string} The formatted date string.\n */\nexport function formatDate(dateString, format = 'medium') {\n  const date = new Date(dateString);\n  \n  const options = {\n    short: { month: 'numeric', day: 'numeric' },\n    medium: { month: 'short', day: 'numeric', year: 'numeric' },\n    long: { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' },\n  };\n  \n  return date.toLocaleDateString('en-US', options[format]);\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAaA,CAACC,IAAI,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;EAC/C,IAAIC,GAAG,GAAG,IAAIF,IAAI,EAAE;EAEpB,MAAMG,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;EACzC,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACP,MAAM,CAAC,EAAE;IACjD,IAAIK,KAAK,KAAKG,SAAS,IAAIH,KAAK,KAAK,IAAI,EAAE;MACzCH,WAAW,CAACO,MAAM,CAACL,GAAG,EAAEC,KAAK,CAAC;IAChC;EACF;EAEA,MAAMK,WAAW,GAAGR,WAAW,CAACS,QAAQ,CAAC,CAAC;EAC1C,IAAID,WAAW,EAAE;IACfT,GAAG,IAAI,IAAIS,WAAW,EAAE;EAC1B;EAEA,OAAOT,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,UAAUA,CAACC,UAAU,EAAEC,MAAM,GAAG,QAAQ,EAAE;EACxD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACH,UAAU,CAAC;EAEjC,MAAMI,OAAO,GAAG;IACdC,KAAK,EAAE;MAAEC,KAAK,EAAE,SAAS;MAAEC,GAAG,EAAE;IAAU,CAAC;IAC3CC,MAAM,EAAE;MAAEF,KAAK,EAAE,OAAO;MAAEC,GAAG,EAAE,SAAS;MAAEE,IAAI,EAAE;IAAU,CAAC;IAC3DC,IAAI,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEL,KAAK,EAAE,MAAM;MAAEC,GAAG,EAAE,SAAS;MAAEE,IAAI,EAAE;IAAU;EAC1E,CAAC;EAED,OAAOP,IAAI,CAACU,kBAAkB,CAAC,OAAO,EAAER,OAAO,CAACH,MAAM,CAAC,CAAC;AAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}