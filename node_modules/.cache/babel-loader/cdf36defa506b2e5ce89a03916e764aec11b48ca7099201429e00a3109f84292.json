{"ast":null,"code":"/**\n * User entity class for managing user data and authentication.\n */\nexport class User {\n  /**\n   * Get the current logged-in user.\n   * @returns {Promise<Object>} The user object.\n   */\n  static async me() {\n    // This would normally be an API call to get the current user\n    // For now, we'll return mock data\n    return {\n      id: '1',\n      name: 'John Doe',\n      email: 'john@example.com',\n      avatar: 'https://i.pravatar.cc/150?u=john@example.com',\n      onboardingCompleted: true,\n      createdAt: '2023-01-15T08:30:00Z'\n    };\n  }\n\n  /**\n   * Update user data.\n   * @param {Object} data - The data to update.\n   * @returns {Promise<Object>} The updated user object.\n   */\n  static async update(data) {\n    // This would normally be an API call to update the user\n    // For now, we'll return mock data\n    return {\n      id: '1',\n      name: data.name || 'John Doe',\n      email: data.email || 'john@example.com',\n      avatar: data.avatar || 'https://i.pravatar.cc/150?u=john@example.com',\n      onboardingCompleted: data.onboardingCompleted || true,\n      createdAt: '2023-01-15T08:30:00Z',\n      updatedAt: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Mark onboarding as complete for the user.\n   * @returns {Promise<Object>} The updated user object.\n   */\n  static async completeOnboarding() {\n    // This would normally be an API call to update the onboarding status\n    // For now, we'll return mock data\n    return User.update({\n      onboardingCompleted: true\n    });\n  }\n\n  /**\n   * Log out the current user.\n   * @returns {Promise<void>}\n   */\n  static async logout() {\n    // This would normally be an API call to log out\n    // For now, we'll just return a resolved promise\n    return Promise.resolve();\n  }\n}","map":{"version":3,"names":["User","me","id","name","email","avatar","onboardingCompleted","createdAt","update","data","updatedAt","Date","toISOString","completeOnboarding","logout","Promise","resolve"],"sources":["C:/Users/hp/OneDrive/vs code projects/tryquad hackathon/src/entities/User.js"],"sourcesContent":["/**\n * User entity class for managing user data and authentication.\n */\nexport class User {\n  /**\n   * Get the current logged-in user.\n   * @returns {Promise<Object>} The user object.\n   */\n  static async me() {\n    // This would normally be an API call to get the current user\n    // For now, we'll return mock data\n    return {\n      id: '1',\n      name: 'John Doe',\n      email: 'john@example.com',\n      avatar: 'https://i.pravatar.cc/150?u=john@example.com',\n      onboardingCompleted: true,\n      createdAt: '2023-01-15T08:30:00Z',\n    };\n  }\n\n  /**\n   * Update user data.\n   * @param {Object} data - The data to update.\n   * @returns {Promise<Object>} The updated user object.\n   */\n  static async update(data) {\n    // This would normally be an API call to update the user\n    // For now, we'll return mock data\n    return {\n      id: '1',\n      name: data.name || 'John Doe',\n      email: data.email || 'john@example.com',\n      avatar: data.avatar || 'https://i.pravatar.cc/150?u=john@example.com',\n      onboardingCompleted: data.onboardingCompleted || true,\n      createdAt: '2023-01-15T08:30:00Z',\n      updatedAt: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Mark onboarding as complete for the user.\n   * @returns {Promise<Object>} The updated user object.\n   */\n  static async completeOnboarding() {\n    // This would normally be an API call to update the onboarding status\n    // For now, we'll return mock data\n    return User.update({ onboardingCompleted: true });\n  }\n\n  /**\n   * Log out the current user.\n   * @returns {Promise<void>}\n   */\n  static async logout() {\n    // This would normally be an API call to log out\n    // For now, we'll just return a resolved promise\n    return Promise.resolve();\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,IAAI,CAAC;EAChB;AACF;AACA;AACA;EACE,aAAaC,EAAEA,CAAA,EAAG;IAChB;IACA;IACA,OAAO;MACLC,EAAE,EAAE,GAAG;MACPC,IAAI,EAAE,UAAU;MAChBC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAE,8CAA8C;MACtDC,mBAAmB,EAAE,IAAI;MACzBC,SAAS,EAAE;IACb,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;EACE,aAAaC,MAAMA,CAACC,IAAI,EAAE;IACxB;IACA;IACA,OAAO;MACLP,EAAE,EAAE,GAAG;MACPC,IAAI,EAAEM,IAAI,CAACN,IAAI,IAAI,UAAU;MAC7BC,KAAK,EAAEK,IAAI,CAACL,KAAK,IAAI,kBAAkB;MACvCC,MAAM,EAAEI,IAAI,CAACJ,MAAM,IAAI,8CAA8C;MACrEC,mBAAmB,EAAEG,IAAI,CAACH,mBAAmB,IAAI,IAAI;MACrDC,SAAS,EAAE,sBAAsB;MACjCG,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;EACH;;EAEA;AACF;AACA;AACA;EACE,aAAaC,kBAAkBA,CAAA,EAAG;IAChC;IACA;IACA,OAAOb,IAAI,CAACQ,MAAM,CAAC;MAAEF,mBAAmB,EAAE;IAAK,CAAC,CAAC;EACnD;;EAEA;AACF;AACA;AACA;EACE,aAAaQ,MAAMA,CAAA,EAAG;IACpB;IACA;IACA,OAAOC,OAAO,CAACC,OAAO,CAAC,CAAC;EAC1B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}